const Project = require('../db/schemas/project')

const ProjectsController = {

    fetchAllProjects : async (req,res) => {
        try {
            const projects = await Project.find()
            res.json(projects)
        } catch (err) {
            res.status(500).json({ message: err })
        }
    },

    fetchOneProject : async (req,res) => {
        try {
            const project = await Project.findById(req.params.id)
                .populate({
                    path: "products.product",
                    model: "Product",
                    populate: {
                        path: "required_jobs",
                        model: "Job",
                        populate: {
                            path: "tasks",
                            model: "Task",
                            populate: {
                                path: "sub_jobs",
                                model: "SubJob",
                                populate: {
                                    path: "part_ref",
                                    model: "Inventory"
                                }
                            }
                        }
                    }
                })
            res.json(project)
        } catch (err) {
            res.status(500).json({ message: err })
        }
    },

    // -- Does the name get autogenerated? -- //
    createNewProject : async (req,res) => {
        try {
            const project = await Project.create(req.body)
            res.json({ message: `${project.name} created successfully!`})
        } catch (err) {
            if (err.code === 11000) res.status(400).json({ message: `Project: ${req.body.name} already exists. Project names must be unique.`})
            res.status(500).json({ message: err })
        }
    },

    updateProject : async (req,res) => {
        try {
            const project = await Project.findByIdAndUpdate(req.params.id, req.body)
            res.json({message: `${project.name} updated successfully!`})
        } catch (err) {
            res.status(500).json({ message: err })
        }
    },

    // -- Fetch Projects with a shipdate within: current week, current month, any month, current year
    fetchProjectsByShipDate : async (req,res) => {
        const currentDate = new Date()
        const firstDayCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1 )
        const lastDayCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)
        const firstDayCurrentWeek = getFirstDayOfWeek()
        const lastDayCurrentWeek = getLastDayOfWeek()
        const firstDayCurrentYear = new Date(currentDate.getFullYear(), 0, 1)
        const lastDayCurrentYear = new Date(currentDate.getFullYear(), 11, 31)
        const { type } = req.params;
        
        try {

            let projects;

            switch (type) {
                case "year":
                    projects = await Project.find({ship_date: {$gte: firstDayCurrentYear, $lte: lastDayCurrentYear }})
                    break;
                case "month":
                    projects = await Project.find({ship_date: {$gte: firstDayCurrentMonth, $lte: lastDayCurrentMonth }})
                    break;
                default:
                    projects = await Project.find({ship_date: {$gte: firstDayCurrentWeek, $lte: lastDayCurrentWeek }})
                    break;
            }

            res.json(projects)

        } catch (err) {
            res.status(500).json({ message: err })
        }
    }
}

const getFirstDayOfWeek = () => {
    const currentDate = new Date()
    const diff = currentDate.getDate() - currentDate.getDay() + (currentDate.getDay() === 0 ? -6 : 1)
    return new Date(currentDate.setDate(diff))
}

const getLastDayOfWeek = () => {
    const today = new Date();
    const first = today.getDate() - today.getDay() + 1;
    const sixth = first + 5;
  
    return new Date(today.setDate(sixth));
}

module.exports = ProjectsController